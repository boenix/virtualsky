FORMAT: 1A
HOST: http://virtualskyapis.com/doc/

# VirtualSKY SDK

VirtualSKY SDK is a Unity plugin that enables Virtual Reality developers to place 10-30 second interstitial advertiser experiences at natural breaks in their Unity project.


# Features
+  Load an ad that is stored locally (offline ad)
+  Load an ad that is stored locally with a specific filename, streaming, and from downloaded file (offline and online ad)
+  Ad events callback
+  Pause ad while the ad is playing (optional)
+  Pause game and show an ad
+  Request ad from server and play it later when needed
+  Tracking for head movement and orientation
+  Serialization data of head movement
+  Tracked data stored as JSON format
+  Playback tracked data (for developer and getting insight)
+  Every ad that is requested is unique depending on client preferences

# Requirements and supports
+  Android 4.0 or latest
+  iOS 6.0 or latest
+  MP4 or WEBM version support up to 1920 * 1080.
+  Android latest device supports up to 4k 
+  iOS  latest device is support up to 2560 * 1440 
+  Supports StreamingAssets, external storage, and streaming services. 
+  Android streaming support list: http, HLS (http live streaming),rtsp 
+  iOS streaming support list: http,HLS (http live streaming)


# How to use
To show 360 ads in your game:

1. [Download](https://virtualskymedia-sandbox.s3.amazonaws.com/sdk/version_1.0.0/VirtualSkySDK%201.0.0.unitypackage) the latest SDK

2. Import the package to your Unity game/project
    
    ![Alt text](https://virtualskymedia-sandbox.s3.amazonaws.com/doc/HowToUse/howToUse1.PNG)

3. Add a "VirtualSkySDK" gameobject to your scene:
    
    ![Alt text](https://virtualskymedia-sandbox.s3.amazonaws.com/doc/HowToUse/howToUse2.PNG)

+ To add to the Hierarchy (Complete package)
    + Select: Menu Bar > VirtualSky > Create Complete Virtual Sky Object  (Recommended)

+ To add to the Hierarchy:
    + Select: Menu Bar > VirtualSky > Create Virtual Sky Object


+ To add to the Hierarchy and attach it as child:
    + Select: Menu Bar > VirtualSky > Create Virtual Sky Object as child

+ To add UI event system:
    + Select: Menu Bar > VirtualSky > Create Virtual Sky EventSystem

And please make these happen:

1. Add "Virtual" layer at field 30 on the menu bar Project Settings > Tags and Layers
    
    ![Alt text](https://virtualskymedia-sandbox.s3.amazonaws.com/doc/HowToUse/addlayer.PNG)

2. There are 2 gameobjects that will be added or should exist in your scene
    
    ![Alt text](https://virtualskymedia-sandbox.s3.amazonaws.com/doc/HowToUse/virtualskyobj.PNG)

2. Assign every variable field on inspector (if needed)


# API [/api]

## VirtualSky

### LoadAd
Load an ad with a specific name from availabe ads list or automaticly based on index of ad list in Streaming asset folder

`LoadAd(bool autoPlay = true, bool trackHead = true)`

`LoadAd(string fileName, bool autoPlay = true, bool trackHead = true)`

### PauseAd
Pause running ad

`PauseAd()`

### SwitchState
Switch current state automatically or set manually

`SwitchState(bool autoPlay = true)` 

`SwitchState(IVirtualSky state, bool autoPlay = false)`

### PlayRequestAd
Play the requested ad

`PlayRequestAd()`

### RequestAd
Request and download an ad from the server database or given url. The downloaded ad will be stored on local storage

`RequestAd(string url)`

`RequestAd()`

### PlayGame
Change current state to gamestate and resume if paused

`PlayGame(bool autoPlay = true)`

### DownloadedAdPath
Get downloaded ad path name from local storage

`DownloadedAdPath(int id)`

    return string

## Toolbox.Instance

### GetData
Get user and unique ad data based on user preferences

+ For login and first time only:

`GetData(string newId = null, string newPassword = null)`

+ For next request:

`GetData()`

### DownloadVideo
Download an ad from given ad class or url

`DownloadVideo(Ad ad, bool autoLoad)`

`DownloadVideo(string url, bool autoLoad)`

### API Sample [GET]
+ Response 200 (application/text)

        [
            {
            using VirtualSkyAd;
            using VirtualSkyAd.Api;
            
            VirtualSky _vskyManager = new VirtualSky();
            

                void Start()
                {
                    _vskyManager.LoadAd(true, true);
                }
                
                void Pause()
                {
                    _vskyManager.PauseAd();
                }
                
                void SwitchState(){
                    _vskyManager.SwitchState(new GameState(_vskyManager));
                }
                
                
                public void RequestAd()
                {
                    if (Toolbox.Instance.IsDownloading) {
                        Debug.LogWarning("Download has been starting");
                        return;
                     }

                    _vskyManager.RequestAd();
                    gameObject.SetActive(false);
                }
                
                public void PlayRequestAd()
                {
                    _vskyManager.PlayRequestAd();
                }
                
                public void PlayGame()
                {
                    if (Toolbox.Instance.IsDownloading) {
                        _vskyManager.PlayGame();
                    }
                }
                
                public void PlayRequestAd(id)
                {
                    _vskyManager.LoadAd(DownloadedAdPath(id));
                }
                
                public void Login(){
                    Toolbox.Instance.GetData(1, 12345);
                }
                
                public void GetNewAdData(){
                    Toolbox.Instance.GetData();
                }
                
                public void DownloadVideo(string url){
                    Ad newAd = new Ad();
                    newAd.url = url;
                    Toolbox.Instance.DownloadVideo(ad, true);
                }
            }
        ]

# Ad Events [/event]
There are a number of important events in the lifecycle of an interstitial ad: downloading, playing, ending, and so on. 
The VirtualSKY SDK allows developers to listen for these through the AdListener list. This guide shows you how to use AdListener for your 360 interstitial ads.

## Using AdListener
To use an AdListener with an VirtualSKY object, simply call the AdListener delagete method for every event you want. Here's an example using these AdListener:

### onLoaded

`onLoaded()`

The onLoaded method is executed when an ad has finished loading and been playing. 

### onEnd

`onEnd()`

The onEnd method is executed when an ad has played till the end. 

### onReady

`onReady()`

The onReady method is executed when an ad ready to load. 

### onDownloaded

`onDownloaded(Ad ad, bool autoLoad)`

The onDownloaded method is executed when requested online ad is downloaded. 

### onDownloading

`onDownloading(float progress)`

The onDownloading method is executed when requested online ad is downloading.

### Ad Events Sample [GET]
+ Response 200 (application/text)

        [
            {
            using VirtualSkyAd;
            using VirtualSkyAd.Api;
            
            VirtualSky _vskyManager = new VirtualSky();
            
               void OnEnable ()
                {
                    _vskyManager.onPlay += OnAdPlay;
                    _vskyManager.onEnd += OnAdEnd;
                    _vskyManager.onDownloaded += OnAdDownloaded;
                    _vskyManager.onDownloading += OnAdDownloading;
                }

                void OnDisable ()
                {
                    _vskyManager.onPlay -= OnAdPlay;
                    _vskyManager.onEnd -= OnAdEnd;
                    _vskyManager.onDownloaded -= OnAdDownloaded;
                    _vskyManager.onDownloading -= OnAdDownloading;
                }
                
                void OnAdPlay ()
                {
                    Debug.Log("Ad is playing");
                }

                void OnAdEnd ()
                {
                    Debug.Log("Ad is end");
                }

                void OnAdDownloaded (Ad ad, bool autoLoad)
                {
                    Debug.Log("Ad was downloaded");
                }

                void OnAdDownloading (float progress)
                {
                    Debug.Log("Ad is on downloading");
                }
            }
        ]